using UnityEngine;
using UnityEngine.UI;
using UnityEngine.XR.Interaction.Toolkit.UI;

/// <summary>
/// Adds color wheel and slider functionality to an existing Canvas
/// Designed to work with any existing VR or standard UI canvas
/// </summary>
public class ColorWheelCanvasAdapter : MonoBehaviour
{
    [Header("Target Canvas")]
    [Tooltip("The existing Canvas to add color wheel functionality to")]
    public Canvas targetCanvas;
    
    [Header("Color Wheel Settings")]
    [Tooltip("Size of the color wheel texture")]
    public int colorWheelSize = 256;
    
    [Tooltip("Where to add the color wheel UI (leave null to create new parent)")]
    public Transform parentTransform;
    
    [Header("Layout Settings")]
    [Tooltip("Position offset for the color wheel panel")]
    public Vector2 panelPosition = Vector2.zero;
    
    [Tooltip("Size of the color wheel panel")]
    public Vector2 panelSize = new Vector2(300, 400);
    
    [Header("Color History")]
    [Tooltip("Number of recent colors to remember")]
    public int maxColorHistory = 8;
    
    [Header("References (Auto-found if not assigned)")]
    public ColorWheel colorWheelComponent;
    public ColorHistory colorHistoryComponent;

    private GameObject colorWheelPanel;
    private RawImage colorWheelImage;
    private RectTransform selectorTransform;
    private Slider brightnessSlider;
    private Slider alphaSlider;
    private Image colorPreview;

    [ContextMenu("Add Color Wheel to Canvas")]
    public void AddColorWheelToCanvas()
    {
        if (targetCanvas == null)
        {
            Debug.LogError("No target canvas assigned!");
            return;
        }

        Debug.Log($"Adding color wheel functionality to canvas: {targetCanvas.name}");

        // Create the main color wheel panel
        CreateColorWheelPanel();
        
        // Create color wheel components
        CreateColorWheel();
        CreateSliders();
        CreateColorPreview();
        CreateColorHistory();
        
        // Setup the ColorWheel component
        SetupColorWheelComponent();
        
        // Setup ColorHistory component
        SetupColorHistoryComponent();

        Debug.Log("âœ… Color wheel added successfully!");
        Debug.Log("ðŸŽ¨ Color wheel is ready to use with your existing canvas!");
    }

    private void CreateColorWheelPanel()
    {
        // Create main panel
        colorWheelPanel = new GameObject("ColorWheelPanel");
        colorWheelPanel.transform.SetParent(parentTransform != null ? parentTransform : targetCanvas.transform, false);
        
        // Add RectTransform and configure
        RectTransform panelRect = colorWheelPanel.AddComponent<RectTransform>();
        panelRect.anchoredPosition = panelPosition;
        panelRect.sizeDelta = panelSize;
        
        // Add background image
        Image backgroundImage = colorWheelPanel.AddComponent<Image>();
        backgroundImage.color = new Color(0.2f, 0.2f, 0.2f, 0.8f);
        
        // Add vertical layout group
        VerticalLayoutGroup layoutGroup = colorWheelPanel.AddComponent<VerticalLayoutGroup>();
        layoutGroup.childControlHeight = false;
        layoutGroup.childControlWidth = false;
        layoutGroup.spacing = 10f;
        layoutGroup.padding = new RectOffset(10, 10, 10, 10);
        
        Debug.Log("Created color wheel panel");
    }

    private void CreateColorWheel()
    {
        // Create color wheel container
        GameObject wheelContainer = new GameObject("ColorWheelContainer");
        wheelContainer.transform.SetParent(colorWheelPanel.transform, false);
        
        RectTransform wheelRect = wheelContainer.AddComponent<RectTransform>();
        wheelRect.sizeDelta = new Vector2(200, 200);
        
        // Create the color wheel image (don't assign texture yet - ColorWheel component will handle it)
        colorWheelImage = wheelContainer.AddComponent<RawImage>();
        
        // Create selector indicator (required by ColorWheel component)
        GameObject selectorObj = new GameObject("Selector");
        selectorObj.transform.SetParent(wheelContainer.transform, false);
        
        RectTransform selectorRect = selectorObj.AddComponent<RectTransform>();
        selectorRect.sizeDelta = new Vector2(10, 10);
        selectorRect.anchoredPosition = Vector2.zero;
        
        Image selectorImage = selectorObj.AddComponent<Image>();
        selectorImage.color = Color.white;
        
        // Store selector reference for ColorWheel component
        selectorTransform = selectorRect;
        
        Debug.Log("Created color wheel display with selector (texture will be generated by ColorWheel component)");
    }

    private void CreateSliders()
    {
        // Create brightness slider
        brightnessSlider = CreateSlider("BrightnessSlider", "Brightness", Color.white);
        brightnessSlider.value = 1f;
        
        // Create alpha slider
        alphaSlider = CreateSlider("AlphaSlider", "Alpha", Color.gray);
        alphaSlider.value = 1f;
        
        Debug.Log("Created brightness and alpha sliders");
    }

    private Slider CreateSlider(string name, string label, Color sliderColor)
    {
        // Create slider container
        GameObject sliderContainer = new GameObject(name + "Container");
        sliderContainer.transform.SetParent(colorWheelPanel.transform, false);
        
        RectTransform containerRect = sliderContainer.AddComponent<RectTransform>();
        containerRect.sizeDelta = new Vector2(280, 30);
        
        // Create label
        GameObject labelObj = new GameObject(label + "Label");
        labelObj.transform.SetParent(sliderContainer.transform, false);
        
        Text labelText = labelObj.AddComponent<Text>();
        labelText.text = label + ":";
        labelText.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
        labelText.fontSize = 14;
        labelText.color = Color.white;
        
        RectTransform labelRect = labelObj.GetComponent<RectTransform>();
        labelRect.anchorMin = new Vector2(0, 0.5f);
        labelRect.anchorMax = new Vector2(0, 0.5f);
        labelRect.anchoredPosition = new Vector2(35, 0);
        labelRect.sizeDelta = new Vector2(70, 20);
        
        // Create slider
        GameObject sliderObj = new GameObject(name);
        sliderObj.transform.SetParent(sliderContainer.transform, false);
        
        Slider slider = sliderObj.AddComponent<Slider>();
        slider.minValue = 0f;
        slider.maxValue = 1f;
        
        RectTransform sliderRect = sliderObj.GetComponent<RectTransform>();
        sliderRect.anchorMin = new Vector2(0.3f, 0.5f);
        sliderRect.anchorMax = new Vector2(1f, 0.5f);
        sliderRect.anchoredPosition = Vector2.zero;
        sliderRect.sizeDelta = new Vector2(0, 20);
        
        // Create slider background
        GameObject background = new GameObject("Background");
        background.transform.SetParent(sliderObj.transform, false);
        
        Image bgImage = background.AddComponent<Image>();
        bgImage.color = new Color(0.1f, 0.1f, 0.1f, 1f);
        
        RectTransform bgRect = background.GetComponent<RectTransform>();
        bgRect.anchorMin = Vector2.zero;
        bgRect.anchorMax = Vector2.one;
        bgRect.sizeDelta = Vector2.zero;
        bgRect.anchoredPosition = Vector2.zero;
        
        slider.targetGraphic = bgImage;
        
        // Create handle slide area
        GameObject handleSlideArea = new GameObject("Handle Slide Area");
        handleSlideArea.transform.SetParent(sliderObj.transform, false);
        
        RectTransform handleAreaRect = handleSlideArea.AddComponent<RectTransform>();
        handleAreaRect.anchorMin = Vector2.zero;
        handleAreaRect.anchorMax = Vector2.one;
        handleAreaRect.sizeDelta = new Vector2(-20, 0);
        handleAreaRect.anchoredPosition = Vector2.zero;
        
        // Create handle
        GameObject handle = new GameObject("Handle");
        handle.transform.SetParent(handleSlideArea.transform, false);
        
        Image handleImage = handle.AddComponent<Image>();
        handleImage.color = sliderColor;
        
        RectTransform handleRect = handle.GetComponent<RectTransform>();
        handleRect.sizeDelta = new Vector2(20, 20);
        
        slider.handleRect = handleRect;
        
        return slider;
    }

    private void CreateColorPreview()
    {
        // Create color preview
        GameObject previewContainer = new GameObject("ColorPreviewContainer");
        previewContainer.transform.SetParent(colorWheelPanel.transform, false);
        
        RectTransform previewRect = previewContainer.AddComponent<RectTransform>();
        previewRect.sizeDelta = new Vector2(280, 40);
        
        // Create preview image
        GameObject previewObj = new GameObject("ColorPreview");
        previewObj.transform.SetParent(previewContainer.transform, false);
        
        colorPreview = previewObj.AddComponent<Image>();
        colorPreview.color = Color.white;
        
        RectTransform colorRect = previewObj.GetComponent<RectTransform>();
        colorRect.anchorMin = Vector2.zero;
        colorRect.anchorMax = Vector2.one;
        colorRect.sizeDelta = Vector2.zero;
        colorRect.anchoredPosition = Vector2.zero;
        
        Debug.Log("Created color preview");
    }

    private void CreateColorHistory()
    {
        // Create color history container
        GameObject historyContainer = new GameObject("ColorHistoryContainer");
        historyContainer.transform.SetParent(colorWheelPanel.transform, false);
        
        RectTransform historyRect = historyContainer.AddComponent<RectTransform>();
        historyRect.sizeDelta = new Vector2(280, 60);
        
        // Add horizontal layout for history buttons
        HorizontalLayoutGroup historyLayout = historyContainer.AddComponent<HorizontalLayoutGroup>();
        historyLayout.spacing = 5f;
        historyLayout.childControlWidth = false;
        historyLayout.childControlHeight = false;
        
        // Create history buttons
        float buttonSize = (280f - (maxColorHistory - 1) * 5f) / maxColorHistory;
        
        for (int i = 0; i < maxColorHistory; i++)
        {
            GameObject buttonObj = new GameObject($"HistoryButton_{i}");
            buttonObj.transform.SetParent(historyContainer.transform, false);
            
            Button button = buttonObj.AddComponent<Button>();
            Image buttonImage = buttonObj.AddComponent<Image>();
            buttonImage.color = Color.gray;
            
            button.targetGraphic = buttonImage;
            
            RectTransform buttonRect = buttonObj.GetComponent<RectTransform>();
            buttonRect.sizeDelta = new Vector2(buttonSize, 50);
        }
        
        Debug.Log($"Created {maxColorHistory} color history buttons");
    }

    private void SetupColorWheelComponent()
    {
        // The ColorWheel component must be on the same GameObject as the RawImage
        // because it implements IPointerDownHandler and needs to receive pointer events
        colorWheelComponent = colorWheelImage.gameObject.AddComponent<ColorWheel>();
        
        // Find CanvasRaycast component for color integration
        CanvasRaycast canvasRaycast = FindFirstObjectByType<CanvasRaycast>();
        
        // Use the SetupReferences method like the working PrefabGenerator does
        colorWheelComponent.SetupReferences(
            colorWheelImage,           // RawImage for the color wheel
            selectorTransform,         // RectTransform for the selector dot
            brightnessSlider,          // Slider for brightness control
            alphaSlider,              // Slider for alpha control
            colorPreview,             // Image for color preview
            canvasRaycast             // CanvasRaycast for painting integration
        );
        
        Debug.Log("ColorWheel component configured using SetupReferences() - should work like PrefabGenerator!");
    }

    private void SetupColorHistoryComponent()
    {
        // ColorHistory must be on the same GameObject as ColorWheel due to RequireComponent
        colorHistoryComponent = colorWheelComponent.gameObject.AddComponent<ColorHistory>();
        
        // ColorHistory will automatically find the ColorWheel component via RequireComponent
        // since they're on the same GameObject
        
        // Find and assign history buttons using reflection since the fields are private
        Button[] historyButtons = colorWheelPanel.GetComponentsInChildren<Button>();
        System.Collections.Generic.List<Button> validButtons = new System.Collections.Generic.List<Button>();
        System.Collections.Generic.List<Image> validImages = new System.Collections.Generic.List<Image>();
        
        foreach (Button btn in historyButtons)
        {
            if (btn.name.StartsWith("HistoryButton_"))
            {
                validButtons.Add(btn);
                Image img = btn.GetComponent<Image>();
                if (img != null)
                {
                    validImages.Add(img);
                }
            }
        }
        
        if (validButtons.Count > 0)
        {
            // Use reflection to set the private historyButtons field
            var buttonsField = typeof(ColorHistory).GetField("historyButtons", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (buttonsField != null)
            {
                buttonsField.SetValue(colorHistoryComponent, validButtons.ToArray());
            }
            
            // Set the historyButtonImages field
            var imagesField = typeof(ColorHistory).GetField("historyButtonImages", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (imagesField != null)
            {
                imagesField.SetValue(colorHistoryComponent, validImages.ToArray());
            }
            
            // Set the maxHistorySize field
            var maxSizeField = typeof(ColorHistory).GetField("maxHistorySize", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (maxSizeField != null)
            {
                maxSizeField.SetValue(colorHistoryComponent, maxColorHistory);
            }
            
            // Set the colorHistoryPanel field
            var panelField = typeof(ColorHistory).GetField("colorHistoryPanel", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (panelField != null)
            {
                // Find the history container
                Transform historyContainer = colorWheelPanel.transform.Find("ColorHistoryContainer");
                if (historyContainer != null)
                {
                    panelField.SetValue(colorHistoryComponent, historyContainer.gameObject);
                }
            }
            
            // IMPORTANT: Set up click listeners for the history buttons
            // This is what makes clicking a color swatch load that color back to the wheel
            for (int i = 0; i < validButtons.Count; i++)
            {
                if (validButtons[i] != null)
                {
                    int buttonIndex = i; // Capture for closure
                    validButtons[i].onClick.RemoveAllListeners(); // Clear any existing listeners
                    validButtons[i].onClick.AddListener(() => {
                        colorHistoryComponent.LoadColorFromHistory(buttonIndex);
                    });
                }
            }
        }
        
        Debug.Log($"ColorHistory component configured with {validButtons.Count} buttons and click listeners");
    }

    [ContextMenu("Find Existing Canvas")]
    public void FindCanvas()
    {
        if (targetCanvas == null)
        {
            targetCanvas = FindFirstObjectByType<Canvas>();
            if (targetCanvas != null)
            {
                Debug.Log($"Found canvas: {targetCanvas.name}");
            }
            else
            {
                Debug.LogError("No canvas found in scene!");
            }
        }
    }

    [ContextMenu("Find Color Components")]
    public void FindColorComponents()
    {
        if (colorWheelComponent == null)
        {
            colorWheelComponent = FindFirstObjectByType<ColorWheel>();
        }
        
        if (colorHistoryComponent == null)
        {
            colorHistoryComponent = FindFirstObjectByType<ColorHistory>();
        }
        
        Debug.Log($"ColorWheel: {(colorWheelComponent != null ? "Found" : "Not found")}");
        Debug.Log($"ColorHistory: {(colorHistoryComponent != null ? "Found" : "Not found")}");
    }

    [ContextMenu("Remove Color Wheel")]
    public void RemoveColorWheel()
    {
        if (colorWheelPanel != null)
        {
            DestroyImmediate(colorWheelPanel);
            Debug.Log("Color wheel removed from canvas");
        }
    }
}
